#!/bin/bash

# Red Banner
banner() {
  echo -e "\e[1;31m"
  echo "███████╗██╗   ██╗███╗   ██╗██╗   ██╗ █████╗ ███╗   ██╗"
  echo "██╔════╝██║   ██║████╗  ██║██║   ██║██╔══██╗████╗  ██║"
  echo "███████╗██║   ██║██╔██╗ ██║██║   ██║███████║██╔██╗ ██║"
  echo "╚════██║██║   ██║██║╚██╗██║██║   ██║██╔══██║██║╚██╗██║"
  echo "███████║╚██████╔╝██║ ╚████║╚██████╔╝██║  ██║██║ ╚████║"
  echo "╚══════╝ ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═══╝"
  echo -e "\e[0m"
  echo -e "\e[1;33m          [ JUMAWAN WEEWKING DNS BOOSTER ]\e[0m"
}

# Auto-install dnsutils
if ! command -v dig &> /dev/null; then
  banner
  echo -e "\e[1;33mInstalling dnsutils...\e[0m"
  pkg install dnsutils -y
fi

# Wakelock
termux-wake-lock

# Core Code (unchanged)
NS=''
NS1=''
NS2=''
NS3=''
NS4=''
NS5='ns-gtm.rafed.xyz'
NS6='ns-weew.rafed.xyz'
A=''

LOOP_DELAY=0
declare -a HOSTS=(
    '124.6.181.31'
    '124.6.181.171'
    '124.6.181.26'
    '124.6.181.27'
    '124.6.181.25'
)

network_booster() {
  echo "Starting network booster..."
  while true; do
    for host in "${HOSTS[@]}"; do
      ping -c 1 "${host}" >/dev/null &
    done
    wait
  done
}

endscript() {
  unset NS NS1 NS2 NS3 NS4 NS5 NS6 A LOOP_DELAY HOSTS
  exit 1
}

trap endscript 2 15

check() {
  for host in "${HOSTS[@]}"; do
    for R in "${A}" "${NS}" "${NS1}" "${NS2}" "${NS3}" "${NS4}" "${NS5}" "${NS6}"; do
      if [ -z "$R" ]; then continue; fi
      if [ -z "$(dig "@${host}" "${R}")" ]; then
        echo -e "\e[31mFailed - Querying: ${R} from ${host}\e[0m"
      else
        echo -e "\e[32mSuccess - Querying: ${R} from ${host}\e[0m"
      fi
    done
  done
}

start_loop() {
  network_booster & NETWORK_BOOSTER_PID=$!
  trap 'kill $NETWORK_BOOSTER_PID 2>/dev/null; endscript' 2 15
  while true; do
    check
    echo '-----------------------------------------'
    sleep "${LOOP_DELAY}"
  done
}

autorun_on() {
  grep -q "bash $(realpath "$0")" ~/.bashrc || echo "bash $(realpath "$0")" >> ~/.bashrc
  echo -e "\e[1;33mAutorun enabled.\e[0m"
}

autorun_off() {
  sed -i "/bash $(realpath "$0")/d" ~/.bashrc
  echo -e "\e[1;31mAutorun disabled.\e[0m"
}

autorun_status() {
  if grep -q "bash $(realpath "$0")" ~/.bashrc; then
    echo -e "\e[1;32mAutorun is ON.\e[0m"
  else
    echo -e "\e[1;31mAutorun is OFF.\e[0m"
  fi
}

menu() {
  while true; do
    banner
    echo -e "\e[1;33m[1] Add NS\n[2] Check NS\n[3] Delete NS\n[4] Start Loop\n[5] Autorun ON\n[6] Autorun OFF\n[7] Autorun Status\n[8] Exit\e[0m"
    read -p "Enter choice: " choice
    case $choice in
      1) read -p "Enter NS: " NS; echo -e "\e[1;32mNS set to: $NS\e[0m";;
      2) check;;
      3) NS=""; NS1=""; NS2=""; NS3=""; NS4=""; NS5=""; NS6=""; echo -e "\e[1;31mNS cleared.\e[0m";;
      4) start_loop;;
      5) autorun_on;;
      6) autorun_off;;
      7) autorun_status;;
      8) exit;;
      *) echo -e "\e[1;31mInvalid choice!\e[0m";;
    esac
  done
}

menu
